{"version":3,"file":"default-src_app_pages_apps_user-managment_user-managment_component_ts.js","mappings":"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","sources":["./src/app/pages/apps/user-managment/user-managment.component.ts","./src/app/pages/apps/user-managment/user-managment.component.html"],"sourcesContent":["import { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { Observable, of, ReplaySubject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { TableColumn } from '../../../../@vex/interfaces/table-column.interface';\r\nimport { aioTableData, aioTableLabels } from '../../../../static-data/aio-table-data';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { fadeInUp400ms } from '../../../../@vex/animations/fade-in-up.animation';\r\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldDefaultOptions } from '@angular/material/form-field';\r\nimport { stagger40ms } from '../../../../@vex/animations/stagger.animation';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { MatSelectChange } from '@angular/material/select';\r\nimport { Customer } from '../aio-table/interfaces/customer.model';\r\n\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'vex-user-managment',\r\n  templateUrl: './user-managment.component.html',\r\n  animations: [\r\n    fadeInUp400ms,\r\n    stagger40ms\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\r\n      useValue: {\r\n        appearance: 'fill'\r\n      } as MatFormFieldDefaultOptions\r\n    }\r\n  ]\r\n})\r\nexport class UserManagementComponent implements OnInit, AfterViewInit {\r\n\r\n  layoutCtrl = new UntypedFormControl('boxed');\r\n\r\n  /**\r\n   * Simulating a service with HTTP that returns Observables\r\n   * You probably want to remove this and do all requests in a service with HTTP\r\n   */\r\n  subject$: ReplaySubject<Customer[]> = new ReplaySubject<Customer[]>(1);\r\n  data$: Observable<Customer[]> = this.subject$.asObservable();\r\n  customers: Customer[];\r\n\r\n  @Input()\r\n  columns: TableColumn<Customer>[] = [\r\n    // { label: 'Checkbox', property: 'checkbox', type: 'checkbox', visible: true },\r\n    // { label: 'Image', property: 'image', type: 'image', visible: true },\r\n    { label: 'Name', property: 'name', type: 'text', visible: true, cssClasses: ['font-medium'] },\r\n    { label: 'First Name', property: 'firstName', type: 'text', visible: false },\r\n    { label: 'Last Name', property: 'lastName', type: 'text', visible: false },\r\n    // { label: 'Contact', property: 'contact', type: 'button', visible: true },\r\n    { label: 'Email', property: 'mail', type: 'text', visible: true, cssClasses: ['text-secondary', 'font-medium'] },\r\n    // { label: 'Street', property: 'street', type: 'text', visible: false, cssClasses: ['text-secondary', 'font-medium'] },\r\n    // { label: 'Zipcode', property: 'zipcode', type: 'text', visible: false, cssClasses: ['text-secondary', 'font-medium'] },\r\n    // { label: 'City', property: 'city', type: 'text', visible: false, cssClasses: ['text-secondary', 'font-medium'] },\r\n    { label: 'Phone', property: 'phoneNumber', type: 'text', visible: true, cssClasses: ['text-secondary', 'font-medium'] },\r\n    { label: 'Roles', property: 'labels', type: 'button', visible: true },\r\n    { label: 'Actions', property: 'actions', type: 'button', visible: true }\r\n  ];\r\n  pageSize = 10;\r\n  pageSizeOptions: number[] = [5, 10, 20, 50];\r\n  dataSource: MatTableDataSource<Customer> | null;\r\n  selection = new SelectionModel<Customer>(true, []);\r\n  searchCtrl = new UntypedFormControl();\r\n\r\n  labels = aioTableLabels;\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n\r\n  constructor(private dialog: MatDialog) {\r\n  }\r\n\r\n  get visibleColumns() {\r\n    return this.columns.filter(column => column.visible).map(column => column.property);\r\n  }\r\n\r\n  /**\r\n   * Example on how to get data and pass it to the table - usually you would want a dedicated service with a HTTP request for this\r\n   * We are simulating this request here.\r\n   */\r\n  getData() {\r\n    return of(aioTableData.map(customer => new Customer(customer)));\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getData().subscribe(customers => {\r\n      this.subject$.next(customers);\r\n    });\r\n\r\n    this.dataSource = new MatTableDataSource();\r\n\r\n    this.data$.pipe(\r\n      filter<Customer[]>(Boolean)\r\n    ).subscribe(customers => {\r\n      this.customers = customers;\r\n      this.dataSource.data = customers;\r\n    });\r\n\r\n    this.searchCtrl.valueChanges.pipe(\r\n      untilDestroyed(this)\r\n    ).subscribe(value => this.onFilterChange(value));\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  createCustomer() {\r\n    // this.dialog.open(CustomerCreateUpdateComponent).afterClosed().subscribe((customer: Customer) => {\r\n    //   /**\r\n    //    * Customer is the updated customer (if the user pressed Save - otherwise it's null)\r\n    //    */\r\n    //   if (customer) {\r\n    //     /**\r\n    //      * Here we are updating our local array.\r\n    //      * You would probably make an HTTP request here.\r\n    //      */\r\n    //     this.customers.unshift(new Customer(customer));\r\n    //     this.subject$.next(this.customers);\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  updateCustomer(customer: Customer) {\r\n    // this.dialog.open(CustomerCreateUpdateComponent, {\r\n    //   data: customer\r\n    // }).afterClosed().subscribe(updatedCustomer => {\r\n    //   /**\r\n    //    * Customer is the updated customer (if the user pressed Save - otherwise it's null)\r\n    //    */\r\n    //   if (updatedCustomer) {\r\n    //     /**\r\n    //      * Here we are updating our local array.\r\n    //      * You would probably make an HTTP request here.\r\n    //      */\r\n    //     const index = this.customers.findIndex((existingCustomer) => existingCustomer.id === updatedCustomer.id);\r\n    //     this.customers[index] = new Customer(updatedCustomer);\r\n    //     this.subject$.next(this.customers);\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  deleteCustomer(customer: Customer) {\r\n    /**\r\n     * Here we are updating our local array.\r\n     * You would probably make an HTTP request here.\r\n     */\r\n    this.customers.splice(this.customers.findIndex((existingCustomer) => existingCustomer.id === customer.id), 1);\r\n    this.selection.deselect(customer);\r\n    this.subject$.next(this.customers);\r\n  }\r\n\r\n  deleteCustomers(customers: Customer[]) {\r\n    /**\r\n     * Here we are updating our local array.\r\n     * You would probably make an HTTP request here.\r\n     */\r\n    customers.forEach(c => this.deleteCustomer(c));\r\n  }\r\n\r\n  onFilterChange(value: string) {\r\n    if (!this.dataSource) {\r\n      return;\r\n    }\r\n    value = value.trim();\r\n    value = value.toLowerCase();\r\n    this.dataSource.filter = value;\r\n  }\r\n\r\n  toggleColumnVisibility(column, event) {\r\n    event.stopPropagation();\r\n    event.stopImmediatePropagation();\r\n    column.visible = !column.visible;\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected() ?\r\n      this.selection.clear() :\r\n      this.dataSource.data.forEach(row => this.selection.select(row));\r\n  }\r\n\r\n  trackByProperty<T>(index: number, column: TableColumn<T>) {\r\n    return column.property;\r\n  }\r\n\r\n  onLabelChange(change: MatSelectChange, row: Customer) {\r\n    const index = this.customers.findIndex(c => c === row);\r\n    this.customers[index].labels = change.value;\r\n    this.subject$.next(this.customers);\r\n  }\r\n}\r\n","<vex-page-layout>\r\n\r\n    <vex-page-layout-header class=\"pb-16 flex flex-col items-start justify-center\">\r\n      <div [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n           [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n           class=\"w-full flex flex-col sm:flex-row justify-between\">\r\n        <div>\r\n          <h1 class=\"title mt-0 mb-1\">User Managment</h1>\r\n          <vex-breadcrumbs [crumbs]=\"['Apps', 'User Managment']\"></vex-breadcrumbs>\r\n        </div>\r\n      </div>\r\n    </vex-page-layout-header>\r\n  \r\n    <vex-page-layout-content [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n                             [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n                             class=\"-mt-6\">\r\n  \r\n      <div class=\"card overflow-auto -mt-16\">\r\n        <div class=\"bg-app-bar px-6 h-16 border-b sticky left-0 flex items-center\">\r\n          <h2 class=\"title my-0 ltr:pr-4 rtl:pl-4 ltr:mr-4 rtl:ml-4 ltr:border-r rtl:border-l hidden sm:block flex-none\">\r\n            <span *ngIf=\"selection.isEmpty()\">Users</span>\r\n            <span *ngIf=\"selection.hasValue()\">{{ selection.selected.length }}\r\n              User<span *ngIf=\"selection.selected.length > 1\">s</span> selected</span>\r\n          </h2>\r\n  \r\n          <div *ngIf=\"selection.hasValue()\" class=\"mr-4 pr-4 border-r flex-none\">\r\n            <button (click)=\"deleteCustomers(selection.selected)\"\r\n                    color=\"primary\"\r\n                    mat-icon-button\r\n                    matTooltip=\"Delete selected\"\r\n                    type=\"button\">\r\n              <mat-icon svgIcon=\"mat:delete\"></mat-icon>\r\n            </button>\r\n  \r\n            <button color=\"primary\" mat-icon-button matTooltip=\"Another action\" type=\"button\">\r\n              <mat-icon svgIcon=\"mat:folder\"></mat-icon>\r\n            </button>\r\n          </div>\r\n  \r\n          <div class=\"bg-foreground rounded-full border px-4 max-w-[300px] flex-auto flex items-center border border-gray-300\">\r\n            <mat-icon class=\"icon-sm text-secondary\" svgIcon=\"mat:search\"></mat-icon>\r\n            <input [formControl]=\"searchCtrl\"\r\n                   class=\"px-4 py-2 border-0 outline-none w-full bg-transparent\"\r\n                   placeholder=\"Search...\"\r\n                   type=\"search\">\r\n          </div>\r\n  \r\n          <span class=\"flex-1\"></span>\r\n  \r\n          <button [matMenuTriggerFor]=\"columnFilterMenu\"\r\n                  class=\"ml-4 flex-none\"\r\n                  mat-icon-button\r\n                  matTooltip=\"Filter Columns\"\r\n                  type=\"button\">\r\n            <mat-icon svgIcon=\"mat:filter_list\"></mat-icon>\r\n          </button>\r\n  \r\n          <button (click)=\"createCustomer()\"\r\n                  class=\"ml-4 flex-none\"\r\n                  color=\"primary\"\r\n                  mat-mini-fab\r\n                  matTooltip=\"Add User\"\r\n                  type=\"button\">\r\n            <mat-icon svgIcon=\"mat:add\"></mat-icon>\r\n          </button>\r\n        </div>\r\n  \r\n        <table @stagger [dataSource]=\"dataSource\" class=\"w-full\" mat-table matSort>\r\n  \r\n          <!--- Note that these columns can be defined in any order.\r\n                The actual rendered columns are set as a property on the row definition\" -->\r\n  \r\n          <!-- Checkbox Column -->\r\n          <ng-container matColumnDef=\"checkbox\">\r\n            <th *matHeaderCellDef mat-header-cell>\r\n              <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                            [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                            color=\"primary\">\r\n              </mat-checkbox>\r\n            </th>\r\n            <td *matCellDef=\"let row\" class=\"w-4\" mat-cell>\r\n              <mat-checkbox (change)=\"$event ? selection.toggle(row) : null\"\r\n                            (click)=\"$event.stopPropagation()\"\r\n                            [checked]=\"selection.isSelected(row)\"\r\n                            color=\"primary\">\r\n              </mat-checkbox>\r\n            </td>\r\n          </ng-container>\r\n  \r\n          <!-- Image Column -->\r\n          <ng-container matColumnDef=\"image\">\r\n            <th *matHeaderCellDef mat-header-cell></th>\r\n            <td *matCellDef=\"let row\" class=\"w-8 min-w-8 pr-0\" mat-cell>\r\n              <img [src]=\"row['imageSrc']\" class=\"avatar h-8 w-8 align-middle\">\r\n            </td>\r\n          </ng-container>\r\n  \r\n          <!-- Text Columns -->\r\n          <ng-container *ngFor=\"let column of columns; trackBy: trackByProperty\">\r\n            <ng-container *ngIf=\"column.type === 'text'\" [matColumnDef]=\"column.property\">\r\n              <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header> {{ column.label }}</th>\r\n              <td *matCellDef=\"let row\" [ngClass]=\"column.cssClasses\" mat-cell>{{ row[column.property] }}</td>\r\n            </ng-container>\r\n          </ng-container>\r\n  \r\n          <!-- Contact Column -->\r\n          <ng-container matColumnDef=\"contact\">\r\n            <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n            <td *matCellDef=\"let row\" mat-cell>\r\n              <div class=\"flex\">\r\n                <a (click)=\"$event.stopPropagation()\"\r\n                   class=\"w-8 h-8 p-0 leading-none flex items-center justify-center hover:bg-hover text-primary bg-primary/10\"\r\n                   mat-icon-button>\r\n                  <mat-icon class=\"icon-sm\" svgIcon=\"mat:phone\"></mat-icon>\r\n                </a>\r\n  \r\n                <a (click)=\"$event.stopPropagation()\"\r\n                   class=\"w-8 h-8 p-0 leading-none flex items-center justify-center ml-1 hover:bg-hover text-teal bg-teal/10\"\r\n                   mat-icon-button>\r\n                  <mat-icon class=\"icon-sm\" svgIcon=\"mat:mail\"></mat-icon>\r\n                </a>\r\n  \r\n                <a (click)=\"$event.stopPropagation()\"\r\n                   class=\"w-8 h-8 p-0 leading-none flex items-center justify-center ml-1 hover:bg-hover text-green bg-green/10\"\r\n                   mat-icon-button>\r\n                  <mat-icon class=\"icon-sm\" svgIcon=\"mat:map\"></mat-icon>\r\n                </a>\r\n              </div>\r\n            </td>\r\n          </ng-container>\r\n  \r\n          <!-- Label Column -->\r\n          <ng-container matColumnDef=\"labels\">\r\n            <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header>Roles</th>\r\n            <td *matCellDef=\"let row\" mat-cell>\r\n              <div (click)=\"$event.stopPropagation()\" class=\"flex items-center gap-1\">\r\n                <div *ngFor=\"let label of row.labels\"\r\n                     [ngClass]=\"[label.textClass, label.bgClass]\"\r\n                     class=\"rounded px-2 py-1 font-medium text-xs flex-none\">\r\n                  {{ label.text }}\r\n                </div>\r\n                <!-- <div class=\"text-secondary bg-base text-hint cursor-pointer hover:bg-hover flex-none flex items-center justify-center\">\r\n                  <mat-icon class=\"icon-sm\" svgIcon=\"mat:add\"></mat-icon>\r\n                </div> -->\r\n              </div>\r\n            </td>\r\n          </ng-container>\r\n  \r\n          <!-- Action Column -->\r\n          <ng-container matColumnDef=\"actions\">\r\n            <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n            <td *matCellDef=\"let row\" class=\"w-10 text-secondary\" mat-cell>\r\n              <button (click)=\"$event.stopPropagation()\"\r\n                      [matMenuTriggerData]=\"{ customer: row }\"\r\n                      [matMenuTriggerFor]=\"actionsMenu\"\r\n                      mat-icon-button\r\n                      type=\"button\">\r\n                <mat-icon svgIcon=\"mat:more_horiz\"></mat-icon>\r\n              </button>\r\n            </td>\r\n          </ng-container>\r\n  \r\n          <tr *matHeaderRowDef=\"visibleColumns\" mat-header-row></tr>\r\n          <tr (click)=\"updateCustomer(row)\"\r\n              *matRowDef=\"let row; columns: visibleColumns;\"\r\n              @fadeInUp\r\n              class=\"hover:bg-hover trans-ease-out cursor-pointer\"\r\n              mat-row></tr>\r\n        </table>\r\n  \r\n        <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" [pageSize]=\"pageSize\" class=\"sticky left-0\"></mat-paginator>\r\n      </div>\r\n  \r\n    </vex-page-layout-content>\r\n  \r\n  </vex-page-layout>\r\n  \r\n  <mat-menu #columnFilterMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n    <button (click)=\"toggleColumnVisibility(column, $event)\" *ngFor=\"let column of columns\"\r\n            class=\"mat-menu-item block\">\r\n      <mat-checkbox (click)=\"$event.stopPropagation()\" [(ngModel)]=\"column.visible\" color=\"primary\">\r\n        {{ column.label }}\r\n      </mat-checkbox>\r\n    </button>\r\n  </mat-menu>\r\n  \r\n  <mat-menu #actionsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n    <ng-template let-customer=\"customer\" matMenuContent>\r\n      <button (click)=\"updateCustomer(customer)\" mat-menu-item>\r\n        <mat-icon svgIcon=\"mat:edit\"></mat-icon>\r\n        <span>Modify</span>\r\n      </button>\r\n      <button (click)=\"deleteCustomer(customer)\" mat-menu-item>\r\n        <mat-icon svgIcon=\"mat:delete\"></mat-icon>\r\n        <span>Delete</span>\r\n      </button>\r\n    </ng-template>\r\n  </mat-menu>\r\n  "],"names":["of","ReplaySubject","filter","MatTableDataSource","MatPaginator","MatSort","aioTableData","aioTableLabels","SelectionModel","fadeInUp400ms","MAT_FORM_FIELD_DEFAULT_OPTIONS","stagger40ms","UntypedFormControl","UntilDestroy","untilDestroyed","Customer","i0","ctx_r23","ctx_r26","$event","UserManagementComponent","constructor","dialog","subject$","asObservable","label","property","type","visible","cssClasses","visibleColumns","columns","column","map","getData","customer","ngOnInit","subscribe","customers","next","dataSource","data$","pipe","Boolean","data","searchCtrl","valueChanges","value","onFilterChange","ngAfterViewInit","paginator","sort","createCustomer","updateCustomer","deleteCustomer","splice","findIndex","existingCustomer","id","selection","deselect","deleteCustomers","forEach","c","trim","toLowerCase","toggleColumnVisibility","event","stopPropagation","stopImmediatePropagation","isAllSelected","numSelected","selected","length","numRows","masterToggle","clear","row","select","trackByProperty","index","onLabelChange","change","labels","selectors","viewQuery","provide","useValue","appearance","decls","vars","consts","template","ctx"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}